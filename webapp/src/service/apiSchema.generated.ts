/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v2/projects/{projectId}/users/{userId}/set-permissions/{permissionType}': {
    put: operations['setUsersPermissions'];
  };
  '/v2/projects/{projectId}/users/{userId}/revoke-access': {
    put: operations['revokePermission'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}/translations/{translationId}/resolve/set-override': {
    put: operations['resolveTranslationSetOverride'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}/translations/{translationId}/resolve/set-keep-existing': {
    put: operations['resolveTranslationSetKeepExisting'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}/resolve-all/set-override': {
    put: operations['resolveTranslationSetOverride_1'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}/resolve-all/set-keep-existing': {
    put: operations['resolveTranslationSetKeepExisting_1'];
  };
  '/v2/projects/{projectId}/import/result/languages/{importLanguageId}/select-existing/{existingLanguageId}': {
    put: operations['selectExistingLanguage'];
  };
  '/v2/projects/{projectId}/import/result/languages/{importLanguageId}/reset-existing': {
    put: operations['resetExistingLanguage'];
  };
  '/v2/projects/{projectId}/import/apply': {
    put: operations['applyImport'];
  };
  '/v2/organizations/{organizationId}/users/{userId}/set-role': {
    put: operations['setUserRole'];
  };
  '/api/organizations/{organizationId}/users/{userId}/set-role': {
    put: operations['setUserRole_1'];
  };
  '/v2/organizations/{id}/leave': {
    put: operations['leaveOrganization'];
  };
  '/api/organizations/{id}/leave': {
    put: operations['leaveOrganization_1'];
  };
  '/v2/organizations/{id}/invite': {
    put: operations['inviteUser'];
  };
  '/api/organizations/{id}/invite': {
    put: operations['inviteUser_1'];
  };
  '/v2/organizations/{id}': {
    get: operations['get_1'];
    put: operations['update'];
    delete: operations['delete'];
  };
  '/api/organizations/{id}': {
    get: operations['get_2'];
    put: operations['update_1'];
    delete: operations['delete_1'];
  };
  '/api/project/{projectId}/keys': {
    put: operations['edit'];
    post: operations['create_3'];
    delete: operations['delete_4'];
  };
  '/api/project/keys': {
    delete: operations['delete_5'];
  };
  '/api/project/{projectId}/translations': {
    put: operations['setTranslations'];
    post: operations['createOrUpdateTranslations'];
  };
  '/api/project/translations': {
    put: operations['setTranslations_1'];
    post: operations['createOrUpdateTranslations_1'];
  };
  '/v2/projects/{projectId}/import': {
    post: operations['addFiles'];
    delete: operations['cancelImport'];
  };
  '/v2/projects/{projectId}/import/with-streaming-response': {
    post: operations['addFilesStreaming'];
  };
  '/v2/organizations': {
    get: operations['getAll_1'];
    post: operations['create'];
  };
  '/api/organizations': {
    get: operations['getAll_2'];
    post: operations['create_1'];
  };
  '/v2/address-part/generate-project': {
    post: operations['generateProjectSlug'];
  };
  '/api/address-part/generate-project': {
    post: operations['generateProjectSlug_1'];
  };
  '/v2/address-part/generate-organization': {
    post: operations['generateOrganizationSlug'];
  };
  '/api/address-part/generate-organization': {
    post: operations['generateOrganizationSlug_1'];
  };
  '/api/user': {
    get: operations['getInfo'];
    post: operations['updateUser'];
  };
  '/api/project/{projectId}/keys/translations/{languages}': {
    /** Key name must be provided in method body, since it can be long and can contain characters hard to encode */
    post: operations['getKeyTranslationsPost'];
  };
  '/api/project/{projectId}/keys/edit': {
    post: operations['editDeprecated'];
  };
  '/api/project/{projectId}/keys/create': {
    post: operations['create_2'];
  };
  '/api/project/{projectId}/languages/edit': {
    post: operations['editLanguage'];
  };
  '/api/project/languages/edit': {
    post: operations['editLanguage_1'];
  };
  '/api/project/{projectId}/languages': {
    get: operations['getAll_3'];
    post: operations['createLanguage'];
  };
  '/api/project/{projectId}/screenshots/get': {
    post: operations['getKeyScreenshots_1'];
  };
  '/api/project/{projectId}/screenshots': {
    post: operations['uploadScreenshot_1'];
  };
  '/api/projects': {
    get: operations['getAll_5'];
    post: operations['createProject'];
  };
  '/api/projects/invite': {
    post: operations['inviteUser_2'];
  };
  '/api/projects/edit': {
    post: operations['editProject'];
  };
  '/api/public/validate_email': {
    post: operations['validateEmail'];
  };
  '/api/public/sign_up': {
    post: operations['signUp'];
  };
  '/api/public/reset_password_set': {
    post: operations['resetPasswordSet'];
  };
  '/api/public/reset_password_request': {
    post: operations['resetPasswordRequest'];
  };
  '/api/public/generatetoken': {
    post: operations['authenticateUser'];
  };
  '/api/apiKeys': {
    get: operations['allByUser'];
    post: operations['create_6'];
  };
  '/api/apiKeys/edit': {
    post: operations['edit_2'];
  };
  '/v2/projects': {
    get: operations['getAll'];
  };
  '/v2/projects/{projectId}': {
    get: operations['get'];
  };
  '/v2/projects/{projectId}/users': {
    get: operations['getAllUsers'];
  };
  '/v2/projects/{projectId}/import/result': {
    get: operations['getImportResult'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}': {
    get: operations['getImportLanguage'];
    delete: operations['deleteLanguage'];
  };
  '/v2/projects/{projectId}/import/result/languages/{languageId}/translations': {
    get: operations['getImportTranslations'];
  };
  '/v2/projects/{projectId}/import/result/files/{importFileId}/issues': {
    get: operations['getImportFileIssues'];
  };
  '/v2/organizations/{organizationId}/invitations': {
    get: operations['getInvitations'];
  };
  '/api/organizations/{organizationId}/invitations': {
    get: operations['getInvitations_1'];
  };
  '/v2/organizations/{id}/users': {
    get: operations['getAllUsers_1'];
  };
  '/api/organizations/{id}/users': {
    get: operations['getAllUsers_2'];
  };
  '/v2/organizations/{id}/projects': {
    get: operations['getAllProjects'];
  };
  '/api/organizations/{id}/projects': {
    get: operations['getAllProjects_1'];
  };
  '/v2/organizations/{slug}/projects': {
    get: operations['getAllProjects_2'];
  };
  '/api/organizations/{slug}/projects': {
    get: operations['getAllProjects_3'];
  };
  '/v2/organizations/{slug}': {
    get: operations['get_3'];
  };
  '/api/organizations/{slug}': {
    get: operations['get_4'];
  };
  '/v2/address-part/validate-project/{slug}': {
    get: operations['validateProjectSlug'];
  };
  '/api/address-part/validate-project/{slug}': {
    get: operations['validateProjectSlug_1'];
  };
  '/v2/address-part/validate-organization/{slug}': {
    get: operations['validateOrganizationSlug'];
  };
  '/api/address-part/validate-organization/{slug}': {
    get: operations['validateOrganizationSlug_1'];
  };
  '/api/project/{projectId}/keys/{id}': {
    get: operations['getDeprecated'];
    delete: operations['delete_2'];
  };
  '/api/project/keys/{id}': {
    get: operations['getDeprecated_1'];
    delete: operations['delete_3'];
  };
  '/api/project/{projectId}/export/jsonZip': {
    get: operations['doExportJsonZip'];
  };
  '/api/project/{projectId}/translations/{languages}': {
    get: operations['getTranslations'];
  };
  '/api/project/translations/{languages}': {
    get: operations['getTranslations_1'];
  };
  '/api/project/{projectId}/translations/view': {
    get: operations['getViewData'];
  };
  '/api/project/{projectId}/languages/{id}': {
    get: operations['get_5'];
    delete: operations['deleteLanguage_1'];
  };
  '/api/project/languages/{id}': {
    get: operations['get_6'];
    delete: operations['deleteLanguage_2'];
  };
  '/api/projects/{id}': {
    get: operations['getProject'];
    delete: operations['deleteProject'];
  };
  '/api/public/verify_email/{userId}/{code}': {
    get: operations['verifyEmail'];
  };
  '/api/public/reset_password_validate/{email}/{code}': {
    get: operations['resetPasswordValidate'];
  };
  '/api/public/configuration': {
    get: operations['getPublicConfiguration'];
  };
  '/api/public/authorize_oauth/{serviceType}/{code}': {
    get: operations['authenticateUser_1'];
  };
  '/api/invitation/list/{projectId}': {
    get: operations['getProjectInvitations'];
  };
  '/api/invitation/accept/{code}': {
    get: operations['acceptInvitation'];
  };
  '/api/apiKeys/scopes': {
    get: operations['getApiKeyScopes'];
  };
  '/api/apiKeys/project/{projectId}': {
    get: operations['allByProject'];
  };
  '/api/apiKeys/availableScopes': {
    get: operations['getScopes'];
  };
  '/v2/organizations/{organizationId}/users/{userId}': {
    delete: operations['removeUser'];
  };
  '/api/organizations/{organizationId}/users/{userId}': {
    delete: operations['removeUser_1'];
  };
  '/api/project/screenshots/{ids}': {
    delete: operations['deleteScreenshots'];
  };
  '/api/project/{projectId}/screenshots/{ids}': {
    delete: operations['deleteScreenshots_1'];
  };
  '/api/invitation/{invitationId}': {
    delete: operations['deleteInvitation'];
  };
  '/api/apiKeys/{key}': {
    delete: operations['delete_6'];
  };
}

export interface components {
  schemas: {
    SetOrganizationRoleDto: {
      roleType: 'MEMBER' | 'OWNER';
    };
    OrganizationInviteUserDto: {
      roleType: 'MEMBER' | 'OWNER';
    };
    Links: { [key: string]: components['schemas']['Link'] };
    OrganizationInvitationModel: {
      id: number;
      code: string;
      type: 'MEMBER' | 'OWNER';
      createdAt: string;
      _links?: components['schemas']['Links'];
    };
    OrganizationDto: {
      name: string;
      description?: string;
      slug?: string;
      basePermissions: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
    };
    OrganizationModel: {
      id: number;
      name: string;
      slug: string;
      description?: string;
      basePermissions: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      currentUserRole: 'MEMBER' | 'OWNER';
      _links?: components['schemas']['Links'];
    };
    EditKeyDTO: {
      currentName: string;
      newName: string;
    };
    SetTranslationsDTO: {
      key: string;
      translations: { [key: string]: string };
    };
    ErrorResponseBody: {
      code?: string;
      params?: { [key: string]: any }[];
    };
    ImportAddFilesResultModel: {
      errors: components['schemas']['ErrorResponseBody'][];
      result?: components['schemas']['PagedModelImportLanguageModel'];
      _links?: components['schemas']['Links'];
    };
    ImportLanguageModel: {
      id: number;
      name: string;
      existingLanguageId?: number;
      existingLanguageAbbreviation?: string;
      existingLanguageName?: string;
      importFileName: string;
      importFileId: number;
      importFileIssueCount: number;
      totalCount: number;
      conflictCount: number;
      resolvedCount: number;
      _links?: components['schemas']['Links'];
    };
    PageMetadata: {
      size?: number;
      totalElements?: number;
      totalPages?: number;
      number?: number;
    };
    PagedModelImportLanguageModel: {
      _embedded?: {
        languages?: components['schemas']['ImportLanguageModel'][];
      };
      _links?: components['schemas']['Links'];
      page?: components['schemas']['PageMetadata'];
    };
    StreamingResponseBody: { [key: string]: any };
    GenerateAddressPathDto: {
      name: string;
      oldSlug?: string;
    };
    UserUpdateRequestDTO: {
      name: string;
      email: string;
      password?: string;
      /** Callback url for link sent in e-mail. This may be omitted, when server has set frontEndUrl in properties. */
      callbackUrl?: string;
    };
    GetKeyTranslationsReqDto: {
      key?: string;
    };
    DeprecatedEditKeyDTO: {
      oldFullPathString: string;
      newFullPathString: string;
    };
    LanguageDTO: {
      id?: number;
      name: string;
      abbreviation: string;
    };
    GetScreenshotsByKeyDTO: {
      key: string;
    };
    ScreenshotDTO: {
      id: number;
      filename: string;
      createdAt: string;
    };
    CreateProjectDTO: {
      name: string;
      languages: components['schemas']['LanguageDTO'][];
      slug?: string;
      /** If not provided, project will be created as users */
      organizationId?: number;
    };
    ProjectDTO: {
      id?: number;
      name?: string;
      permissionType?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
    };
    ProjectInviteUserDto: {
      projectId: number;
      type: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
    };
    EditProjectDTO: {
      projectId: number;
      name: string;
      slug?: string;
    };
    TextNode: { [key: string]: any };
    SignUpDto: {
      name: string;
      email: string;
      password: string;
      invitationCode?: string;
      callbackUrl?: string;
    };
    ResetPassword: {
      email: string;
      code: string;
      password?: string;
    };
    ResetPasswordRequest: {
      callbackUrl: string;
      email?: string;
    };
    LoginRequest: {
      username?: string;
      password?: string;
    };
    CreateApiKeyDTO: {
      projectId: number;
      scopes?: string[];
    };
    ApiKeyDTO: {
      id?: number;
      "Resulting user's api key"?: string;
      userName?: string;
      projectId?: number;
      projectName?: string;
      scopes?: string[];
    };
    EditApiKeyDTO: {
      id: number;
      scopes: string[];
    };
    Pageable: {
      page?: number;
      size?: number;
      sort?: string[];
    };
    PagedModelProjectModel: {
      _embedded?: {
        projects?: components['schemas']['ProjectModel'][];
      };
      _links?: components['schemas']['Links'];
      page?: components['schemas']['PageMetadata'];
    };
    ProjectModel: {
      id: number;
      name: string;
      description?: string;
      slug?: string;
      userOwner?: components['schemas']['UserAccountModel'];
      organizationOwnerName?: string;
      organizationOwnerSlug?: string;
      organizationOwnerBasePermissions?:
        | 'VIEW'
        | 'TRANSLATE'
        | 'EDIT'
        | 'MANAGE';
      organizationRole?: 'MEMBER' | 'OWNER';
      /** Current user's direct permission */
      directPermissions?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      /** Actual current user's permissions on this project. You can not sort data by this column! */
      computedPermissions?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      _links?: components['schemas']['Links'];
    };
    UserAccountModel: {
      id: number;
      username: string;
      name?: string;
      _links?: components['schemas']['Links'];
    };
    PagedModelUserAccountInProjectModel: {
      _embedded?: {
        users?: components['schemas']['UserAccountInProjectModel'][];
      };
      _links?: components['schemas']['Links'];
      page?: components['schemas']['PageMetadata'];
    };
    UserAccountInProjectModel: {
      id: number;
      username: string;
      name?: string;
      organizationRole?: 'MEMBER' | 'OWNER';
      organizationBasePermissions?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      directPermissions?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      /** Actual user's permissions on selected project. You can not sort data by this column! */
      computedPermissions: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      _links?: components['schemas']['Links'];
    };
    ImportTranslationModel: {
      id: number;
      text?: string;
      keyName: string;
      keyId: number;
      conflictId?: number;
      conflictText?: string;
      override: boolean;
      resolved: boolean;
      _links?: components['schemas']['Links'];
    };
    PagedModelImportTranslationModel: {
      _embedded?: {
        translations?: components['schemas']['ImportTranslationModel'][];
      };
      _links?: components['schemas']['Links'];
      page?: components['schemas']['PageMetadata'];
    };
    EntityModelImportFileIssueView: {
      id?: number;
      type?:
        | 'KEY_IS_NOT_STRING'
        | 'MULTIPLE_VALUES_FOR_KEY_AND_LANGUAGE'
        | 'VALUE_IS_NOT_STRING'
        | 'KEY_IS_EMPTY'
        | 'VALUE_IS_EMPTY'
        | 'PO_MSGCTXT_NOT_SUPPORTED'
        | 'ID_ATTRIBUTE_NOT_PROVIDED'
        | 'TARGET_NOT_PROVIDED';
      params?: components['schemas']['ImportFileIssueParamView'][];
      _links?: components['schemas']['Links'];
    };
    ImportFileIssueParamView: {
      value?: string;
      type:
        | 'KEY_NAME'
        | 'KEY_ID'
        | 'LANGUAGE_ID'
        | 'KEY_INDEX'
        | 'VALUE'
        | 'LINE'
        | 'FILE_NODE_ORIGINAL';
    };
    PagedModelEntityModelImportFileIssueView: {
      _embedded?: {
        importFileIssueViews?: components['schemas']['EntityModelImportFileIssueView'][];
      };
      _links?: components['schemas']['Links'];
      page?: components['schemas']['PageMetadata'];
    };
    CollectionModelOrganizationInvitationModel: {
      _embedded?: {
        organizationInvitations?: components['schemas']['OrganizationInvitationModel'][];
      };
      _links?: components['schemas']['Links'];
    };
    PagedModelUserAccountWithOrganizationRoleModel: {
      _embedded?: {
        usersInOrganization?: components['schemas']['UserAccountWithOrganizationRoleModel'][];
      };
      _links?: components['schemas']['Links'];
      page?: components['schemas']['PageMetadata'];
    };
    UserAccountWithOrganizationRoleModel: {
      id: number;
      name: string;
      username: string;
      organizationRole: 'MEMBER' | 'OWNER';
      _links?: components['schemas']['Links'];
    };
    OrganizationRequestParamsDto: {
      filterCurrentUserOwner: boolean;
    };
    PagedModelOrganizationModel: {
      _embedded?: {
        organizations?: components['schemas']['OrganizationModel'][];
      };
      _links?: components['schemas']['Links'];
      page?: components['schemas']['PageMetadata'];
    };
    UserResponseDTO: {
      id?: number;
      name?: string;
      username?: string;
      emailAwaitingVerification?: string;
    };
    DeprecatedKeyDto: {
      /** This means name of key. Will be renamed in v2 */
      fullPathString: string;
    };
    KeyWithTranslationsResponseDto: {
      id?: number;
      name?: string;
      translations: { [key: string]: string };
    };
    PaginationMeta: {
      offset?: number;
      allCount?: number;
    };
    ResponseParams: {
      search?: string;
      languages?: string[];
    };
    ViewDataResponseLinkedHashSetKeyWithTranslationsResponseDtoResponseParams: {
      paginationMeta?: components['schemas']['PaginationMeta'];
      params?: components['schemas']['ResponseParams'];
      data?: components['schemas']['KeyWithTranslationsResponseDto'][];
    };
    JwtAuthenticationResponse: {
      accessToken?: string;
      tokenType?: string;
    };
    AuthMethodsDTO: {
      github: components['schemas']['GithubPublicConfigDTO'];
    };
    GithubPublicConfigDTO: {
      clientId?: string;
      isEnabled: boolean;
    };
    PublicConfigurationDTO: {
      isAuthentication: boolean;
      authMethods?: components['schemas']['AuthMethodsDTO'];
      isPasswordResettable: boolean;
      isAllowRegistrations: boolean;
      screenshotsUrl: string;
      maxUploadFileSize: number;
      clientSentryDsn?: string;
      needsEmailVerification: boolean;
      userCanCreateProjects: boolean;
      userCanCreateOrganizations: boolean;
    };
    InvitationDTO: {
      id?: number;
      code?: string;
      type?: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
    };
    Link: {
      href?: string;
      hreflang?: string;
      title?: string;
      type?: string;
      deprecation?: string;
      profile?: string;
      name?: string;
      templated?: boolean;
    };
  };
}

export interface operations {
  setUsersPermissions: {
    parameters: {
      path: {
        projectId: number;
        userId: number;
        permissionType: 'VIEW' | 'TRANSLATE' | 'EDIT' | 'MANAGE';
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  revokePermission: {
    parameters: {
      path: {
        projectId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  resolveTranslationSetOverride: {
    parameters: {
      path: {
        languageId: number;
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  resolveTranslationSetKeepExisting: {
    parameters: {
      path: {
        languageId: number;
        translationId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  resolveTranslationSetOverride_1: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  resolveTranslationSetKeepExisting_1: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  selectExistingLanguage: {
    parameters: {
      path: {
        importLanguageId: number;
        existingLanguageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  resetExistingLanguage: {
    parameters: {
      path: {
        importLanguageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  applyImport: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        forceMode?: 'OVERRIDE' | 'KEEP' | 'NO_FORCE';
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  setUserRole: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetOrganizationRoleDto'];
      };
    };
  };
  setUserRole_1: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetOrganizationRoleDto'];
      };
    };
  };
  leaveOrganization: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  leaveOrganization_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  inviteUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationInvitationModel'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationInviteUserDto'];
      };
    };
  };
  inviteUser_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationInvitationModel'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationInviteUserDto'];
      };
    };
  };
  get_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
    };
  };
  update: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationDto'];
      };
    };
  };
  delete: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  get_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
    };
  };
  update_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationDto'];
      };
    };
  };
  delete_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  edit: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EditKeyDTO'];
      };
    };
  };
  create_3: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetTranslationsDTO'];
      };
    };
  };
  delete_4: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': number[];
      };
    };
  };
  delete_5: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': number[];
      };
    };
  };
  setTranslations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetTranslationsDTO'];
      };
    };
  };
  createOrUpdateTranslations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetTranslationsDTO'];
      };
    };
  };
  setTranslations_1: {
    parameters: {};
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetTranslationsDTO'];
      };
    };
  };
  createOrUpdateTranslations_1: {
    parameters: {};
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetTranslationsDTO'];
      };
    };
  };
  addFiles: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ImportAddFilesResultModel'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          files: string[];
        };
      };
    };
  };
  cancelImport: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  addFilesStreaming: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['StreamingResponseBody'];
        };
      };
    };
    requestBody: {
      content: {
        'multipart/form-data': {
          files: string[];
        };
      };
    };
  };
  getAll_1: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
        params: components['schemas']['OrganizationRequestParamsDto'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/hal+json': components['schemas']['PagedModelOrganizationModel'];
        };
      };
    };
  };
  create: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationDto'];
      };
    };
  };
  getAll_2: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
        params: components['schemas']['OrganizationRequestParamsDto'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/hal+json': components['schemas']['PagedModelOrganizationModel'];
        };
      };
    };
  };
  create_1: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationDto'];
      };
    };
  };
  generateProjectSlug: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string;
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateAddressPathDto'];
      };
    };
  };
  generateProjectSlug_1: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string;
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateAddressPathDto'];
      };
    };
  };
  generateOrganizationSlug: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string;
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateAddressPathDto'];
      };
    };
  };
  generateOrganizationSlug_1: {
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': string;
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GenerateAddressPathDto'];
      };
    };
  };
  getInfo: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['UserResponseDTO'];
        };
      };
    };
  };
  updateUser: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['UserUpdateRequestDTO'];
      };
    };
  };
  /** Key name must be provided in method body, since it can be long and can contain characters hard to encode */
  getKeyTranslationsPost: {
    parameters: {
      path: {
        languages: string[];
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': { [key: string]: string };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetKeyTranslationsReqDto'];
      };
    };
  };
  editDeprecated: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['DeprecatedEditKeyDTO'];
      };
    };
  };
  create_2: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SetTranslationsDTO'];
      };
    };
  };
  editLanguage: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['LanguageDTO'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LanguageDTO'];
      };
    };
  };
  editLanguage_1: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['LanguageDTO'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LanguageDTO'];
      };
    };
  };
  getAll_3: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['LanguageDTO'][];
        };
      };
    };
  };
  createLanguage: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['LanguageDTO'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LanguageDTO'];
      };
    };
  };
  getKeyScreenshots_1: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ScreenshotDTO'][];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['GetScreenshotsByKeyDTO'];
      };
    };
  };
  uploadScreenshot_1: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        key: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ScreenshotDTO'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': {
          screenshot: string;
        };
      };
    };
  };
  getAll_5: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectDTO'][];
        };
      };
    };
  };
  createProject: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectDTO'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProjectDTO'];
      };
    };
  };
  inviteUser_2: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': string;
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ProjectInviteUserDto'];
      };
    };
  };
  editProject: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectDTO'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EditProjectDTO'];
      };
    };
  };
  validateEmail: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': boolean;
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['TextNode'];
      };
    };
  };
  signUp: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': { [key: string]: any };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpDto'];
      };
    };
  };
  resetPasswordSet: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ResetPassword'];
      };
    };
  };
  resetPasswordRequest: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['ResetPasswordRequest'];
      };
    };
  };
  authenticateUser: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': { [key: string]: any };
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginRequest'];
      };
    };
  };
  allByUser: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ApiKeyDTO'][];
        };
      };
    };
  };
  create_6: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ApiKeyDTO'];
        };
      };
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApiKeyDTO'];
      };
    };
  };
  edit_2: {
    responses: {
      /** OK */
      200: unknown;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['EditApiKeyDTO'];
      };
    };
  };
  getAll: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/hal+json': components['schemas']['PagedModelProjectModel'];
        };
      };
    };
  };
  get: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectModel'];
        };
      };
    };
  };
  getAllUsers: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        pageable: components['schemas']['Pageable'];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelUserAccountInProjectModel'];
        };
      };
    };
  };
  getImportResult: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        pageable: components['schemas']['Pageable'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelImportLanguageModel'];
        };
      };
    };
  };
  getImportLanguage: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ImportLanguageModel'];
        };
      };
    };
  };
  deleteLanguage: {
    parameters: {
      path: {
        languageId: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  getImportTranslations: {
    parameters: {
      path: {
        projectId: number;
        languageId: number;
      };
      query: {
        onlyConflicts?: boolean;
        onlyUnresolved?: boolean;
        search?: string;
        pageable: components['schemas']['Pageable'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelImportTranslationModel'];
        };
      };
    };
  };
  getImportFileIssues: {
    parameters: {
      path: {
        importFileId: number;
        projectId: number;
      };
      query: {
        pageable: components['schemas']['Pageable'];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelEntityModelImportFileIssueView'];
        };
      };
    };
  };
  getInvitations: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelOrganizationInvitationModel'];
        };
      };
    };
  };
  getInvitations_1: {
    parameters: {
      path: {
        organizationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['CollectionModelOrganizationInvitationModel'];
        };
      };
    };
  };
  getAllUsers_1: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        pageable: components['schemas']['Pageable'];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelUserAccountWithOrganizationRoleModel'];
        };
      };
    };
  };
  getAllUsers_2: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        pageable: components['schemas']['Pageable'];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelUserAccountWithOrganizationRoleModel'];
        };
      };
    };
  };
  getAllProjects: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        pageable: components['schemas']['Pageable'];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelProjectModel'];
        };
      };
    };
  };
  getAllProjects_1: {
    parameters: {
      path: {
        id: number;
      };
      query: {
        pageable: components['schemas']['Pageable'];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelProjectModel'];
        };
      };
    };
  };
  getAllProjects_2: {
    parameters: {
      path: {
        slug: string;
      };
      query: {
        pageable: components['schemas']['Pageable'];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelProjectModel'];
        };
      };
    };
  };
  getAllProjects_3: {
    parameters: {
      path: {
        slug: string;
      };
      query: {
        pageable: components['schemas']['Pageable'];
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PagedModelProjectModel'];
        };
      };
    };
  };
  get_3: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
    };
  };
  get_4: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['OrganizationModel'];
        };
      };
    };
  };
  validateProjectSlug: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': boolean;
        };
      };
    };
  };
  validateProjectSlug_1: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': boolean;
        };
      };
    };
  };
  validateOrganizationSlug: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': boolean;
        };
      };
    };
  };
  validateOrganizationSlug_1: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': boolean;
        };
      };
    };
  };
  getDeprecated: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['DeprecatedKeyDto'];
        };
      };
    };
  };
  delete_2: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  getDeprecated_1: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['DeprecatedKeyDto'];
        };
      };
    };
  };
  delete_3: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  doExportJsonZip: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/zip': components['schemas']['StreamingResponseBody'];
        };
      };
    };
  };
  getTranslations: {
    parameters: {
      path: {
        languages: string[];
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': { [key: string]: { [key: string]: any } };
        };
      };
    };
  };
  getTranslations_1: {
    parameters: {
      path: {
        languages: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': { [key: string]: { [key: string]: any } };
        };
      };
    };
  };
  getViewData: {
    parameters: {
      path: {
        projectId: number;
      };
      query: {
        languages?: string[];
        limit?: number;
        offset?: number;
        search?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ViewDataResponseLinkedHashSetKeyWithTranslationsResponseDtoResponseParams'];
        };
      };
    };
  };
  get_5: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['LanguageDTO'];
        };
      };
    };
  };
  deleteLanguage_1: {
    parameters: {
      path: {
        id: number;
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  get_6: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['LanguageDTO'];
        };
      };
    };
  };
  deleteLanguage_2: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  getProject: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ProjectDTO'];
        };
      };
    };
  };
  deleteProject: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  verifyEmail: {
    parameters: {
      path: {
        userId: number;
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['JwtAuthenticationResponse'];
        };
      };
    };
  };
  resetPasswordValidate: {
    parameters: {
      path: {
        code: string;
        email: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  getPublicConfiguration: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['PublicConfigurationDTO'];
        };
      };
    };
  };
  authenticateUser_1: {
    parameters: {
      path: {
        serviceType: string;
        code: string;
      };
      query: {
        invitationCode?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['JwtAuthenticationResponse'];
        };
      };
    };
  };
  getProjectInvitations: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['InvitationDTO'][];
        };
      };
    };
  };
  acceptInvitation: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  getApiKeyScopes: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': string[];
        };
      };
    };
  };
  allByProject: {
    parameters: {
      path: {
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': components['schemas']['ApiKeyDTO'][];
        };
      };
    };
  };
  getScopes: {
    responses: {
      /** OK */
      200: {
        content: {
          '*/*': { [key: string]: string[] };
        };
      };
    };
  };
  removeUser: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  removeUser_1: {
    parameters: {
      path: {
        organizationId: number;
        userId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  deleteScreenshots: {
    parameters: {
      path: {
        ids: number[];
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  deleteScreenshots_1: {
    parameters: {
      path: {
        ids: number[];
        projectId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  deleteInvitation: {
    parameters: {
      path: {
        invitationId: number;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
  delete_6: {
    parameters: {
      path: {
        key: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
    };
  };
}
