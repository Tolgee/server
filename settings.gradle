dependencyResolutionManagement {
    versionCatalogs {
        libs {
            version('kotlin', String.valueOf(kotlinVersion));
            version('springDoc', '1.7.0');
            version('jjwt', '0.11.2');
            version('amazonAwsSdk', '2.20.8');

            library('stripe', 'com.stripe', 'stripe-java').version('22.11.0');
            library('sendInBlue', 'com.sendinblue', 'sib-api-v3-sdk').version('5.3.0');
            library('jacksonModuleKotlin', 'com.fasterxml.jackson.module', 'jackson-module-kotlin').version('2.12.4');
            library('kotlinReflect', 'org.jetbrains.kotlin', 'kotlin-reflect').versionRef('kotlin');
            library('kotlinCoroutines', 'org.jetbrains.kotlinx', 'kotlinx-coroutines-core').version('1.6.1');
            library('springDocOpenApiWebMvcCore', 'org.springdoc', 'springdoc-openapi-webmvc-core').versionRef('springDoc');
            library('springDocOpenApiUi', 'org.springdoc', 'springdoc-openapi-ui').versionRef('springDoc');
            library('springDocOpenApiKotlin', 'org.springdoc', 'springdoc-openapi-kotlin').versionRef('springDoc');
            library('springDocOpenApiDataRest', 'org.springdoc', 'springdoc-openapi-data-rest').versionRef('springDoc');
            library('springDocOpenApiHateoas', 'org.springdoc', 'springdoc-openapi-hateoas').versionRef('springDoc');
            library('jjwtApi', 'io.jsonwebtoken', 'jjwt-api').versionRef('jjwt');
            library('jjwtImpl', 'io.jsonwebtoken', 'jjwt-impl').versionRef('jjwt');
            library('jjwtJackson', 'io.jsonwebtoken', 'jjwt-jackson').versionRef('jjwt');
            library('assertJCore', 'org.assertj', 'assertj-core').version('3.19.0');
            library('springmockk', 'com.ninja-squad', 'springmockk').version('3.0.1');
            library('mockito', 'org.mockito.kotlin', 'mockito-kotlin').version('5.0.0');
            library('commonsCodec', 'commons-codec', 'commons-codec').version('1.15');
            library('commonsText', 'org.apache.commons', 'commons-text').version('1.9');
            library('datafaker', 'net.datafaker', 'datafaker').version('1.5.0');
            library('jaxen', 'jaxen', 'jaxen').version('1.2.0');
            library('icu4j', 'com.ibm.icu', 'icu4j').version('69.1');
            library('jsonUnitAssert', 'net.javacrumbs.json-unit', 'json-unit-assertj').version('2.28.0');
            library('otp', 'com.eatthepath', 'java-otp').version('0.4.0');
            library('amazonS3', 'software.amazon.awssdk', 's3').versionRef('amazonAwsSdk');
            library('amazonSTS', 'software.amazon.awssdk', 'sts').versionRef('amazonAwsSdk');
            library('amazonTranslate', 'software.amazon.awssdk', 'translate').versionRef('amazonAwsSdk');
            library('googleCloud', 'com.google.cloud', 'libraries-bom').version('24.0.0');
            library('amazonS3Mock', 'io.findify', 's3mock_2.13').version('0.2.6');
            library('socketIoClient', 'io.socket', 'socket.io-client').version('1.0.1');
            library('sentry', 'io.sentry', 'sentry-spring-boot-starter').version('5.7.3');
            library('liquibaseCore', 'org.liquibase', 'liquibase-core').version('4.9.1');
            library('liquibaseGroovyDsl', 'org.liquibase', 'liquibase-groovy-dsl').version('3.0.2');
            library('liquibaseHibernate', 'org.liquibase.ext', 'liquibase-hibernate5').version('4.9.1');
            library('hibernateTypes', 'com.vladmihalcea', 'hibernate-types-55').version('2.14.1');
            library('redissonSpringBootStarter', 'org.redisson', 'redisson-spring-boot-starter').version('3.23.2');
            library('redissonSpringData', 'org.redisson', 'redisson-spring-data-27').version('3.23.2');
            library('postHog', 'com.posthog.java', 'posthog').version('1.1.0');
            library('micrometerPrometheus', 'io.micrometer', 'micrometer-registry-prometheus').version('1.9.12');
            library('caffeineCaching', 'com.github.ben-manes.caffeine', 'caffeine').version('3.0.5');
        }
    }
}

include ':server-app'
project(':server-app').projectDir = new File('backend/app')

include ':data'
project(':data').projectDir = new File('backend/data')

include ':billing-app'
project(':billing-app').projectDir = new File('../billing/app')

include ':billing-test'
project(':billing-test').projectDir = new File('../billing/tests')

include ':testing'
project(':testing').projectDir = new File('backend/testing')

include ':misc'
project(':misc').projectDir = new File('backend/misc')

include ':ee-app'
project(':ee-app').projectDir = new File('ee/backend/app')

include ':ee-test'
project(':ee-test').projectDir = new File('ee/backend/tests')

include ':development'
project(':development').projectDir = new File('backend/development')

include ':api'
project(':api').projectDir = new File('backend/api')

include ':security'
project(':security').projectDir = new File('backend/security')
