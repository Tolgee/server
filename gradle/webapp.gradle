def webappPath = "${project.rootDir}/webapp"

task copyDist(type: Copy) {
    def fromDir = "${webappPath}/build"
    def toDir = "${project.rootDir}/build/dependency/BOOT-INF/classes/static/."
    from fromDir
    into toDir
    inputs.dir(fromDir)
    outputs.dir(toDir)
    mustRunAfter unpack
    dependsOn "buildWebapp"
}

task installWebappDeps(type: Exec) {
    onlyIf { System.getenv("SKIP_WEBAPP_BUILD") != "true" }
    commandLine npmCommandName, "ci"
    workingDir = webappPath
    inputs.file("${webappPath}/package.json")
    inputs.file("${webappPath}/package-lock.json")
    outputs.dir("${webappPath}/node_modules")
}

task buildWebapp(type: Exec) {
    onlyIf { System.getenv("SKIP_WEBAPP_BUILD") != "true" }
    commandLine npmCommandName, "run", "build"
    workingDir = webappPath
    inputs.dir("${webappPath}/")
    outputs.dir("${webappPath}/build/")
    dependsOn "installWebappDeps", "updateStaticTranslations"
}

task createBuildDir() {
    File directory = new File(buildDir as String)
    if (!directory.exists()) {
        directory.mkdir()
    }
}

task updateStaticTranslations(type: Exec) {
    onlyIf { System.getenv("SKIP_WEBAPP_BUILD") != "true" }
    def tolgeeApiKey = System.env.TOLGEE_API_KEY
    def tolgeeApiUrl = System.env.TOLGEE_API_URL
    onlyIf { tolgeeApiUrl != null && tolgeeApiUrl != "" }
    workingDir = webappPath
    commandLine npmCommandName, "run", "load-translations"
    dependsOn(createBuildDir)
}
