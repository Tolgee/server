/*
 * Copyright (c) 2020. Tolgee
 */

plugins {
    id 'io.tolgee.gradle.kotlin'
    id 'io.tolgee.gradle.spring'
    id 'io.tolgee.gradle.hibernate'
}

group = 'io.tolgee'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    ktlint
}

dependencies {
    /**
     * SPRING
     */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation('org.springframework.boot:spring-boot-starter-test')
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    api "org.springframework.boot:spring-boot-starter-actuator"

    /**
     * Testing
     */
    implementation libs.assertJCore
    implementation libs.springmockk
    implementation libs.mockito
    implementation libs.jsonUnitAssert

    /**
     * Kotlin
     */
    implementation libs.kotlinReflect

    /**
     * MISC
     */
    implementation libs.commonsCodec
    implementation libs.amazonS3
    implementation libs.icu4j
    implementation libs.jjwtApi
    implementation libs.jjwtImpl
    implementation libs.jjwtJackson
    implementation libs.jacksonModuleKotlin
    implementation libs.kotlinCoroutines

    /**
     * DATA MODULE
     */
    implementation(project(':data'))


    /**
     * MISC
     */
    implementation(project(':misc'))
    implementation 'org.postgresql:postgresql'
}

configurations {
    all*.exclude group: 'com.vaadin.external.google', module: 'android-json'
}

test {
    useJUnitPlatform()
    maxHeapSize = "2048m"
}

project.tasks.findByName("compileKotlin").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("compileJava").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("bootJarMainClassName").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin', 'src/main/java']
    test.kotlin.srcDirs = ['src/test/kotlin', 'src/test/java']
}

tasks.findByName("jar").enabled(true)
tasks.findByName("bootJar").enabled(false)

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
