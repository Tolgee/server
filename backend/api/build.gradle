/*
 * Copyright (c) 2020. Tolgee
 */

plugins {
    id 'io.tolgee.gradle.base'
    id 'io.tolgee.gradle.kotlin'
    id 'io.tolgee.gradle.spring'
}

group = 'io.tolgee'

allOpen {
    annotation("org.springframework.stereotype.Component")
    annotation("org.springframework.boot.test.context.SpringBootTest")
}

dependencies {
    implementation libs.kotlinCoroutines
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    implementation(project(':data'))
    implementation(project(':misc'))
    implementation(project(':security'))
    implementation(project(':ee-app'))

    /**
     * SPRING DOC
     */
    implementation libs.springDocOpenApiWebMvcCore
    implementation libs.springDocOpenApiUi
    implementation libs.springDocOpenApiKotlin
    implementation libs.springDocOpenApiDataRest
    implementation libs.springDocOpenApiHateoas
    implementation dependencies.create(libs.redissonSpringBootStarter.get()) {
        exclude group: 'org.redisson', module: 'redisson-spring-data-31'
    }
    implementation libs.redissonSpringData

    /**
     * Misc
     */
    implementation libs.commonsCodec
    implementation libs.sentry
    implementation libs.jjwtApi
    implementation libs.jjwtImpl
    implementation libs.jjwtJackson
    implementation libs.caffeineCaching
    api libs.postHog
}

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin', 'src/main/java']
    test.kotlin.srcDirs = ['src/test/kotlin', 'src/test/java']
}

tasks.findByName("jar").enabled(true)
tasks.findByName("bootJar").enabled(false)

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
