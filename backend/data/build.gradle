/*
 * Copyright (c) 2020. Tolgee
 */

buildscript {
    repositories {
        mavenCentral()
    }
    ext {
        kotlinVersion = findProperty("kotlinVersion") ?: '1.5.10'
        springBootVersion = findProperty("springBootVersion") ?: '2.4.5'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath group: 'commons-io', name: 'commons-io', version: '2.11.0'
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version "$springBootVersion"
    id 'java'
    id 'org.liquibase.gradle' version '2.0.4'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.jpa" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
}

group = 'io.tolgee'

if (System.getenv().containsKey("VERSION")) {
    project.version = System.getenv().get("VERSION")
} else {
    project.version = 'local'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    ktlint
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.jetbrains.kotlin.plugin.jpa"
apply plugin: "kotlin-allopen"

repositories {
    mavenCentral()
    jcenter()
}

sourceCompatibility = 11

idea {
    module {
        generatedSourceDirs += files('build/generated/source/kapt/main', 'build/generated/source/kaptKotlin/main')
    }
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
    annotation("org.springframework.transaction.annotation.Transactional")
    annotation("org.springframework.stereotype.Service")
}

def liveDbPostgres = [
        url         : 'jdbc:postgresql://localhost:5432/postgres',
        referenceUrl: 'hibernate:spring:io.tolgee' +
                '?dialect=org.hibernate.dialect.PostgreSQL95Dialect' +
                '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy' +
                '&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy',
        username    : 'postgres',
        password    : 'postgres',
        driver      : "org.postgresql.Driver"
]

def liveDbH2 = [
        url         : "jdbc:h2:${project.projectDir}/build/tmp_db_schema_updates/db.h2;DATABASE_TO_LOWER=TRUE",
        referenceUrl: 'hibernate:spring:io.tolgee' +
                '?dialect=org.hibernate.dialect.H2Dialect' +
                '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy' +
                '&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy',
        driver      : 'org.h2.Driver'
]

def liveDb = liveDbPostgres

liquibase {
    activities {
        //noinspection GroovyAssignabilityCheck
        main {
            changeLogFile 'src/main/resources/db/changelog/schema.xml'
            url liveDb.url
            referenceUrl liveDb.referenceUrl
            if (liveDb.username) {
                username liveDb.username
            }
            if (liveDb.password) {
                password liveDb.password
            }

            driver liveDb.driver
        }
    }
}

diff.dependsOn compileKotlin
diffChangeLog.dependsOn compileKotlin

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

def JJWT_VERSION = "0.11.2"
def LIQUIBASE_VERSION = "4.4.2"
def LIQUIBASE_HIBERNATE_VERSION = "4.4.2"
def SPRING_DOC_VERSION = findProperty("springDocVersion") ?: "1.5.10"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation("org.springframework.data:spring-data-envers")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile("org.assertj:assertj-core:3.19.0")
    implementation("org.liquibase:liquibase-core:$LIQUIBASE_VERSION")
    liquibaseRuntime("org.liquibase:liquibase-core:$LIQUIBASE_VERSION")
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime('org.liquibase:liquibase-groovy-dsl:3.0.1')
    liquibaseRuntime("org.liquibase.ext:liquibase-hibernate5:$LIQUIBASE_HIBERNATE_VERSION")
    liquibaseRuntime sourceSets.main.output
    implementation 'org.hibernate:hibernate-jpamodelgen'
    testCompile group: 'org.testng', name: 'testng', version: '7.4.0'
    kapt "org.hibernate:hibernate-jpamodelgen"
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    liquibaseRuntime group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.12.4'
    compile group: 'com.ninja-squad', name: 'springmockk', version: '3.0.1'
    testImplementation('org.mockito.kotlin:mockito-kotlin:3.2.0')
    implementation group: 'org.springdoc', name: 'springdoc-openapi-kotlin', version: "${SPRING_DOC_VERSION}"
    implementation "org.springdoc:springdoc-openapi-webmvc-core:${SPRING_DOC_VERSION}"
    implementation 'commons-codec:commons-codec:1.15'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.37'
    implementation group: 'com.ibm.icu', name: 'icu4j', version: '69.1'
    implementation "io.jsonwebtoken:jjwt-api:${JJWT_VERSION}"
    runtime "io.jsonwebtoken:jjwt-impl:${JJWT_VERSION}",
            "io.jsonwebtoken:jjwt-jackson:${JJWT_VERSION}"
}

test {
    useTestNG()
    maxHeapSize = "2048m"
}

project.tasks.findByName("compileKotlin").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("compileJava").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("bootJarMainClassName").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin', 'src/main/java']
    test.kotlin.srcDirs = ['src/test/kotlin', 'src/test/java']
}

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

tasks.findByName("jar").enabled(true)
