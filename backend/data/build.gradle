/*
 * Copyright (c) 2020. Tolgee
 */

plugins {
    id 'io.tolgee.gradle.kotlin'
    id 'io.tolgee.gradle.spring'
    id 'io.tolgee.gradle.hibernate'
    id 'io.tolgee.gradle.liquibase'
}

group = 'io.tolgee'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    ktlint
}

hibernate {
    enhance {
        enableLazyInitialization = true
        enableDirtyTracking = true
        enableAssociationManagement = false
        enableExtendedEnhancement = false
    }
}

//configureLiquibase("public", "hibernate:spring:io.tolgee", 'src/main/resources/db/changelog/schema.xml')

diff.dependsOn compileKotlin
diffChangeLog.dependsOn compileKotlin

dependencies {
    /**
     * SPRING
     */
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation("org.springframework.data:spring-data-envers")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation('org.springframework.boot:spring-boot-starter-test')
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-starter-batch"
    implementation "org.springframework.boot:spring-boot-starter-websocket"


    /**
     * DB
     */
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.hibernate:hibernate-jpamodelgen'
    kapt "org.hibernate:hibernate-jpamodelgen"

    /**
     * Redisson
     */
    implementation dependencies.create(libs.redissonSpringBootStarter.get()) {
        exclude group: 'org.redisson', module: 'redisson-spring-data-31'
    }
    implementation libs.redissonSpringData

    /**
     * Liquibase
     */
    implementation libs.liquibaseCore
    liquibaseRuntime libs.liquibaseCore
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime libs.liquibaseGroovyDsl
    liquibaseRuntime libs.liquibaseHibernate
    liquibaseRuntime libs.kotlinReflect
    liquibaseRuntime sourceSets.main.output
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'

    /**
     * Testing
     */
    implementation libs.assertJCore
    implementation libs.springmockk
    testImplementation libs.mockito
    implementation libs.jsonUnitAssert
    testImplementation(project(":testing"))

    /**
     * Kotlin
     */
    implementation libs.kotlinReflect
    liquibaseRuntime libs.kotlinReflect
    implementation libs.kotlinCoroutines

    /**
     * SPRING DOC
     */
    implementation libs.springDocOpenApiWebMvcCore
    implementation libs.springDocOpenApiKotlin

    /**
     * MISC
     */
    implementation libs.commonsCodec
    implementation libs.commonsText
    implementation libs.icu4j
    implementation libs.jjwtApi
    implementation libs.jjwtImpl
    implementation libs.jjwtJackson
    implementation libs.jacksonModuleKotlin
    implementation libs.datafaker
    implementation libs.jaxen
    implementation libs.sendInBlue
    implementation libs.sentry
    implementation libs.hibernateTypes
    liquibaseRuntime libs.hibernateTypes
    implementation libs.otp
    implementation libs.postHog
    implementation libs.micrometerPrometheus

    /**
     * Google translation API
     */
    implementation platform(libs.googleCloud)
    implementation 'com.google.cloud:google-cloud-translate'

    /**
     * AWS
     */
    implementation libs.amazonS3
    implementation libs.amazonTranslate

    /**
     * MISC MODULE
     */
    implementation(project(':misc'))
}

configurations {
    all*.exclude group: 'com.vaadin.external.google', module: 'android-json'
}

test {
    useJUnitPlatform()
    maxHeapSize = "2048m"
}

project.tasks.findByName("compileKotlin").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("compileJava").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("bootJarMainClassName").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin', 'src/main/java']
    test.kotlin.srcDirs = ['src/test/kotlin', 'src/test/java']
}

tasks.findByName("jar").enabled(true)
tasks.findByName("bootJar").enabled(false)

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}
