/*
 * Copyright (c) 2020. Tolgee
 */

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'org.springframework.boot' version "$springBootVersion"
    id 'java'
    id 'org.jetbrains.kotlin.jvm'
    id "org.jetbrains.kotlin.plugin.jpa" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt"
    id "kotlin-allopen"
}

group = 'io.tolgee'

if (System.getenv().containsKey("VERSION")) {
    project.version = System.getenv().get("VERSION")
} else {
    project.version = 'local'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.jetbrains.kotlin.plugin.jpa"
apply plugin: "kotlin-allopen"

repositories {
    mavenCentral()
}

sourceCompatibility = 11

allOpen {
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
    annotation("org.springframework.stereotype.Service")
    annotation("org.springframework.stereotype.Component")
    annotation("org.springframework.stereotype.Service")
    annotation("org.springframework.transaction.annotation.Transactional")
    annotation("org.springframework.beans.factory.annotation.Configurable")
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

/**
 * Versions from properties
 */
def JJWT_VERSION = findProperty("jjwtVersion")
def SPRING_DOC_VERSION = findProperty("springDocVersion")

def NETTY_SOCKET_IO_VERSION = "1.7.19"

dependencies {
    /**
     * SPRING
     */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-hateoas"
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation("org.springframework.ldap:spring-ldap-core")
    implementation("org.springframework.security:spring-security-ldap")


    /**
     * SPRING DOC
     */
    implementation "org.springdoc:springdoc-openapi-webmvc-core:${SPRING_DOC_VERSION}"
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: "${SPRING_DOC_VERSION}"
    implementation group: 'org.springdoc', name: 'springdoc-openapi-kotlin', version: "${SPRING_DOC_VERSION}"
    implementation group: 'org.springdoc', name: 'springdoc-openapi-data-rest', version: "${SPRING_DOC_VERSION}"
    implementation group: 'org.springdoc', name: 'springdoc-openapi-hateoas', version: "${SPRING_DOC_VERSION}"


    /**
     * TESTING
     */
    testImplementation("org.assertj:assertj-core:${findProperty("assertJVerison")}")
    testImplementation("org.springframework.security:spring-security-test")
    implementation "io.jsonwebtoken:jjwt-api:${JJWT_VERSION}"
    runtime "io.jsonwebtoken:jjwt-impl:${JJWT_VERSION}",
            "io.jsonwebtoken:jjwt-jackson:${JJWT_VERSION}"
    testImplementation group: 'org.testng', name: 'testng', version: findProperty("testNgVersion")
    implementation group: 'com.ninja-squad', name: 'springmockk', version: findProperty("springMockkVersion")
    implementation "net.javacrumbs.json-unit:json-unit-assertj:${findProperty("jsonUnitAssertJVersion")}"
    testImplementation("org.mockito.kotlin:mockito-kotlin:${findProperty("mockitoVersion")}")
    testCompile("io.findify:s3mock_2.13:0.2.6")
    testImplementation("io.socket:socket.io-client:1.0.1")

    /**
     * MISC
     */
    implementation 'io.sentry:sentry-spring-boot-starter:5.0.1'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation "commons-codec:commons-codec:${findProperty("commonsCodecVersion")}"
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: findProperty("amazonAwsSdkVersion")
    implementation group: 'com.ibm.icu', name: 'icu4j', version: findProperty("icu4jVersion")
    implementation("com.corundumstudio.socketio:netty-socketio:$NETTY_SOCKET_IO_VERSION")
    implementation("org.redisson:redisson-spring-boot-starter:3.16.1")
    implementation("com.github.ben-manes.caffeine:caffeine:3.0.3")
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${findProperty("jacksonModuleKotlinVersion")}"

    /**
     * KOTLIN
     */
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'

    /**
     * Google translation API
     */
    implementation platform("com.google.cloud:libraries-bom:${findProperty("googleCloudVersion")}")
    implementation 'com.google.cloud:google-cloud-translate'

    /**
     * Aws translate
     */
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-translate', version: findProperty("amazonAwsSdkVersion")

    /**
     * Conditional billing module
     */
    if (rootProject.project(":billing-app").projectDir.exists()) {
        implementation(project(':billing-app'))
    }

    /**
     * DATA MODULE
     */
    implementation(project(':data'))

    /**
     * TESTING MODULE
     */
    testImplementation(project(':testing'))
}

test {
    useTestNG()
    maxHeapSize = "2048m"
}

springBoot {
    buildInfo {
        properties {
            version = project.version
        }
    }
}

bootJar {
    archiveFileName = "tolgee-${project.version}.jar"
    manifest {
        attributes('Implementation-Version': project.version)
    }
    onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
}

def unpackTarget = "build/dependency"

task unpack(type: Copy) {
    from(zipTree(project.tasks.findByName("bootJar").outputs.files.singleFile))
    into(unpackTarget)
    if (System.getenv("SKIP_SERVER_BUILD") != "true") {
        dependsOn "bootJar"
    }
}

task addVersionFile(type: Task) {
    mustRunAfter unpack
    doLast {
        def file = new File("${project.buildDir}/dependency/BOOT-INF/classes/.VERSION")
        file.write(project.version.toString())
    }
}

project.tasks.findByName("compileKotlin").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("bootBuildInfo").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("compileJava").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("bootJarMainClassName").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin', 'src/main/java']
    test.kotlin.srcDirs = ['src/test/kotlin', 'src/test/java']
}
