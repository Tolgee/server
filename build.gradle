/*
 * Copyright (c) 2020. Tolgee
 */

plugins {
    id 'io.tolgee.gradle.base'
}

project.ext {
    dbSchemaContainerName = 'tolgee_postgres_dbschema'
}

def unpackTarget = "${project.buildDir}/dependency"

project(':server-app').afterEvaluate {
    task unpack(type: Copy) {
        from(zipTree(project(':server-app').tasks.findByName("bootJar").outputs.files.singleFile))
        into(unpackTarget)
        if (System.getenv("SKIP_SERVER_BUILD") != "true") {
            dependsOn "bootJar"
        }
    }

    task addVersionFile(type: Task) {
        mustRunAfter unpack
        doLast {
            def file = new File("${unpackTarget}/BOOT-INF/classes/.VERSION")
            file.write(project.version.toString())
        }
    }

    apply from: "./gradle/webapp.gradle"
    apply from: "./gradle/docker.gradle"
    apply from: "./gradle/e2e.gradle"

    project.tasks.findByName("docker").mustRunAfter(copyDist)

    task packResources(type: Zip) {
        dependsOn "unpack"
        dependsOn "copyDist"
        dependsOn "addVersionFile"
        from "${project.projectDir}/build/dependency"
        archiveFileName = "tolgee.jar"
        destinationDirectory = file("$buildDir/libs")
        entryCompression ZipEntryCompression.STORED
    }

    project.tasks.named('build').configure {
        dependsOn project(':server-app').tasks.findByName("build")
        dependsOn runE2e
    }

    project.tasks.named('check').configure {
        dependsOn project(':server-app').tasks.findByName("check")
        dependsOn ktlintCheckAll
    }

    task bootJar {
        dependsOn project(':server-app').tasks.findByName("bootJar")
    }

    task startDbChangelogContainer {
        doLast {
            exec {
                commandLine "docker", "run", "-e", "POSTGRES_PASSWORD=postgres", "-d", "-p55432:5432", "--name", dbSchemaContainerName, "postgres:13"
            }
            Thread.sleep(5000)
        }
    }

    task stopDbChangelogContainer(type: Exec) {
        commandLine "docker", "rm", "--force", dbSchemaContainerName
        mustRunAfter project(':data').tasks.findByName("diffChangeLog")
        mustRunAfter project(':ee-app').tasks.findByName("diffChangeLog")
    }

    task diffChangeLog {
        subprojects.forEach({
            it.tasks.findByName("diffChangeLog")?.mustRunAfter(project(':server-app').tasks.findByName("bootRun"))
        })

        project(':server-app').tasks.findByName("bootRun").mustRunAfter(startDbChangelogContainer)


        finalizedBy = [
                startDbChangelogContainer,
                project(':server-app').tasks.findByName("bootRun"),
                project(':data').tasks.findByName("diffChangeLog"),
        ]

        def billingDiffChangelog = project(':billing-app').tasks.findByName("diffChangeLog")

        if (billingDiffChangelog != null) {
            finalizedBy.add(billingDiffChangelog)
        }

        finalizedBy.add(stopDbChangelogContainer)

        doFirst {
            project(':server-app').bootRun.systemProperty('spring.profiles.active', 'dbschema')
        }
    }
}

task ktlintCheckAll(group: "Verification", description: "Runs the ktlint on all projects") {
    dependsOn getTasksByName("ktlintCheck", true)
}

task ktlintFormatAll(group: "Formatting", description: "Runs the ktlint formatter on all projects") {
    dependsOn getTasksByName("ktlintFormat", true)
}

allprojects {
    apply plugin: 'project-report'

    // report is generated using ./gradlew dependencyReport
    dependencyReport {
        outputFile = new File("${rootProject.buildDir}/reports/dependencies/${project.name}.txt")
    }
}

gradle.addListener new io.tolgee.gradle.TimingsListener()
