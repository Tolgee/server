/*
 * Copyright (c) 2020. Polygloat
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.4.0")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.21"
    }
}

plugins {
    id "com.palantir.docker" version "0.25.0"
    id 'com.palantir.docker-compose' version "0.25.0"
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.springframework.boot' version '2.4.0'
    id 'java'
    id 'org.liquibase.gradle' version '2.0.4'
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id "org.jetbrains.kotlin.plugin.jpa" version "1.4.21"
    id "org.jetbrains.kotlin.kapt" version "1.4.21"
}

group = 'io.polygloat'

if (System.getenv().containsKey("VERSION")) {
    project.version = System.getenv().get("VERSION")
} else {
    project.version = 'local'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.jetbrains.kotlin.plugin.jpa"

repositories {
    mavenCentral()
}

def liveDb = [
        url         : 'jdbc:postgresql://localhost:5432/postgres',
        referenceUrl: 'hibernate:spring:io.polygloat' +
                '?dialect=org.hibernate.dialect.PostgreSQL95Dialect' +
                '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy' +
                '&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy',
        username    : 'postgres',
        password    : 'postgres',
]

liquibase {
    activities {
        //noinspection GroovyAssignabilityCheck
        main {
            changeLogFile 'src/main/resources/db/changelog/schema.xml'
            url liveDb.url
            referenceUrl liveDb.referenceUrl
            username liveDb.username
            password liveDb.password
            driver "org.postgresql.Driver"
        }
    }
}

diff.dependsOn compileKotlin
diffChangeLog.dependsOn compileKotlin

def LIQUIBASE_VERSION = "4.2.2"
def LIQUIBASE_HIBERNATE_VERSION = "4.2.2"
def JJWT_VERSION = "0.11.2"
def SPRING_DOC_VERSION = "1.5.2"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation "org.springframework.boot:spring-boot-starter-validation"
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    compile "org.springframework.boot:spring-boot-configuration-processor"
    testCompile "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'io.sentry:sentry-spring-boot-starter:3.2.0'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile("org.assertj:assertj-core:3.18.1")
    testCompile("org.springframework.security:spring-security-test")
    implementation("org.springframework.ldap:spring-ldap-core")
    implementation("org.springframework.security:spring-security-ldap")
    implementation("org.springframework:spring-tx")
    implementation("com.unboundid:unboundid-ldapsdk")
    implementation "io.jsonwebtoken:jjwt-api:${JJWT_VERSION}"
    runtime "io.jsonwebtoken:jjwt-impl:${JJWT_VERSION}",
            "io.jsonwebtoken:jjwt-jackson:${JJWT_VERSION}"
    implementation("org.liquibase:liquibase-core:$LIQUIBASE_VERSION")
    runtime("org.liquibase:liquibase-core:$LIQUIBASE_VERSION")
    compile("org.liquibase:liquibase-core:$LIQUIBASE_VERSION")
    liquibaseRuntime("org.liquibase:liquibase-core:$LIQUIBASE_VERSION")
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime('org.liquibase:liquibase-groovy-dsl:3.0.0')
    liquibaseRuntime("org.liquibase.ext:liquibase-hibernate5:$LIQUIBASE_HIBERNATE_VERSION")
    liquibaseRuntime('org.springframework.boot:spring-boot-starter-data-jpa')
    liquibaseRuntime sourceSets.main.output
    implementation 'com.github.javafaker:javafaker:1.0.1'
    implementation 'org.hibernate:hibernate-jpamodelgen'
    testCompile group: 'org.testng', name: 'testng', version: '7.3.0'
    implementation "org.springdoc:springdoc-openapi-webmvc-core:${SPRING_DOC_VERSION}"
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: "${SPRING_DOC_VERSION}"
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.4.2-native-mt'
    kapt "org.hibernate:hibernate-jpamodelgen"
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.4.21'
    liquibaseRuntime group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.4.21'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.12.0'
    implementation 'commons-codec:commons-codec:1.15'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.929'
    compile group: 'com.ninja-squad', name: 'springmockk', version: '3.0.0'
}

test {
    useTestNG()
}

springBoot {
    buildInfo {
        properties {
            version = project.version
        }
    }
}

bootJar {
    archiveFileName = "polygloat-${project.version}.jar"
    manifest {
        attributes('Implementation-Version': project.version)
    }
}

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin', 'src/main/java']
    test.kotlin.srcDirs = ['src/test/kotlin', 'src/test/java']
}

def customWebApp = System.getenv().containsKey("WEBAPP_PATH")
def webappPath = customWebApp ? System.getenv().get("WEBAPP_PATH") : rootProject.project("webapp").projectDir
def unpackTarget = "build/dependency"

task unpack(type: Copy) {
    from(zipTree(project.tasks.findByName("bootJar").outputs.files.singleFile))
    into(unpackTarget)
    dependsOn "bootJar"
}

task copyDist(type: Copy) {
    if (!customWebApp) {
        evaluationDependsOn rootProject.project("webapp").getPath()
        dependsOn rootProject.project("webapp").getTasks().findByName("build")
    }
    def fromDir = "${webappPath}/dist"
    def toDir = "${project.projectDir}/build/dependency/BOOT-INF/classes/static/."
    from fromDir
    into toDir
    inputs.dir(fromDir)
    outputs.dir(toDir)
    mustRunAfter unpack
}

project.tasks.findByName("dockerPrepare").mustRunAfter(copyDist)

apply from: "./docker.gradle"

task buildProd(dependsOn: ['bootJar'])

task packWebapp(type: Zip) {
    dependsOn "unpack"
    dependsOn "copyDist"
    from "${project.projectDir}/build/dependency"
    archiveFileName = "polygloat-${project.version}-test.jar"
    destinationDirectory = file("$buildDir/libs")
    entryCompression ZipEntryCompression.STORED
}
