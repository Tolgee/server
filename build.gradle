/*
 * Copyright (c) 2020. Tolgee
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    }
}

if (System.getenv().containsKey("VERSION")) {
    project.version = System.getenv().get("VERSION")
} else {
    project.version = 'local'
}

configurations {
    ktlint
}

apply plugin: 'idea'

repositories {
    mavenCentral()
}

def unpackTarget = "${project.buildDir}/dependency"

dependencies {
    ktlint("com.pinterest:ktlint:0.42.1") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
}

project(':server-app').afterEvaluate {
    task unpack(type: Copy) {
        from(zipTree(project(':server-app').tasks.findByName("bootJar").outputs.files.singleFile))
        into(unpackTarget)
        if (System.getenv("SKIP_SERVER_BUILD") != "true") {
            dependsOn "bootJar"
        }
    }

    task addVersionFile(type: Task) {
        mustRunAfter unpack
        doLast {
            def file = new File("${unpackTarget}/BOOT-INF/classes/.VERSION")
            file.write(project.version.toString())
        }
    }

    apply from: "./gradle/webapp.gradle"
    apply from: "./gradle/docker.gradle"
    apply from: "./gradle/e2e.gradle"

    project.tasks.findByName("docker").mustRunAfter(copyDist)

    task packResources(type: Zip) {
        dependsOn "unpack"
        dependsOn "copyDist"
        dependsOn "addVersionFile"
        from "${project.projectDir}/build/dependency"
        archiveFileName = "tolgee-${project.version}.jar"
        destinationDirectory = file("$buildDir/libs")
        entryCompression ZipEntryCompression.STORED
    }

    task build {
        dependsOn project(':server-app').tasks.findByName("build")
        dependsOn runE2e
    }

    task check {
        dependsOn project(':server-app').tasks.findByName("check")
        dependsOn ktlint
    }
    task bootJar {
        dependsOn project(':server-app').tasks.findByName("bootJar")
    }
}


task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "**/*.kt", "!**/data/PluralData.kt"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "**/*.kt", "!**/data/PluralData.kt"
}
